[
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-10-22 17:49:34.014792",
  "module": "Custom App",
  "name": "So Notification",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Sales Order",
  "script": "def sendmail(doc):\r\n    # Fetch the Sales Order name from the document (doc is automatically passed)\r\n    sales_order_name = doc.name\r\n    \r\n    # Fetch the Sales Order document (this step is optional since doc is already the Sales Order)\r\n    sales_order = frappe.get_doc(\"Sales Order\", sales_order_name)\r\n    frappe.errprint(\"test\" + sales_order_name)\r\n    \r\n#     # Check if the Sales Order has a sales team\r\n    # if sales_order.sales_team:\r\n        # frappe.response['test']\r\n        # for sales_person in sales_order.sales_team:\r\n        #     # Create a message for logging and email content\r\n        #     text = \"Sales Person: \" + sales_person.sales_person + \" - This is a test notification.\"\r\n            \r\n        #     # Log the message in the Error Log for debugging purposes\r\n        #     frappe.log_error(title=\"Sales Team Notification\", message=text)\r\n            \r\n            # Optionally, send an email notification using frappe.sendmail\r\n            # frappe.sendmail(\r\n            #     recipients=[\"recipient@example.com\"],  # Replace with actual recipient email\r\n            #     subject=\"Sales Order Sales Team Notification\",\r\n            #     message=text\r\n            # )\r\n\r\n# The method 'doc' and 'method' will be automatically passed in server scripts\r\nsendmail(doc)\r\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "Get",
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-11-19 13:25:10.903376",
  "module": null,
  "name": "getpoinpr",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "if frappe.form_dict.message == \"ping\":\r\n\tfrappe.response['message'] = \"pong\"\r\nelse:\r\n\tfrappe.response['message'] = \"ok\"",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-11-21 12:13:31.923135",
  "module": "Custom App",
  "name": "Material Request Status",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Material Request",
  "script": "import frappe\r\nfrom frappe.model.document import Document\r\n\r\n@frappe.whitelist()\r\ndef create_stock_entry_from_material_request(material_request):\r\n    \"\"\"\r\n    Create a Stock Entry from a Material Request with 'Demo' purpose\r\n    \"\"\"\r\n    # Fetch the Material Request\r\n    mr = frappe.get_doc(\"Material Request\", material_request)\r\n    \r\n    # Validate if it's a Demo Material Request\r\n    if mr.material_request_type != \"Demo\":\r\n        frappe.throw(\"This method is only for Demo Material Requests\")\r\n    \r\n    # Create Stock Entry\r\n    stock_entry = frappe.new_doc(\"Stock Entry\")\r\n    stock_entry.stock_entry_type = \"Material Transfer\"\r\n    stock_entry.purpose = \"Material Transfer\"\r\n    stock_entry.material_request = mr.name\r\n    \r\n    # Add items to Stock Entry\r\n    for item in mr.items:\r\n        se_item = stock_entry.append(\"items\", {})\r\n        se_item.item_code = item.item_code\r\n        se_item.qty = item.qty\r\n        se_item.uom = item.uom\r\n        se_item.s_warehouse = item.from_warehouse\r\n        se_item.t_warehouse = item.warehouse\r\n        se_item.material_request = mr.name\r\n        se_item.material_request_item = item.name\r\n    \r\n    # Save and submit the Stock Entry\r\n    stock_entry.save()\r\n    stock_entry.submit()\r\n    \r\n    # Update Material Request status\r\n    mr.status = \"Transferred\"\r\n    mr.save()\r\n    \r\n    return stock_entry.name",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-06-19 16:09:07.077953",
  "module": "Custom App",
  "name": "GST Calculation",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Sales Invoice",
  "script": "doc.set('taxes_and_charges', None)\ndoc.set_missing_lead_customer_details()\n\nif doc.get('taxes_and_charges') and not doc.get('taxes'):\n   tax_master = frappe.get_doc(\"Sales Taxes and Charges Template\", doc.taxes_and_charges)\n\n   for tax in tax_master.get(\"taxes\"):\n       tax = tax.as_dict()\n       tax_dict = {\n           'category': tax.category,\n           'account_head': tax.account_head,\n           'charge_type': tax.charge_type,\n           'description': tax.description,\n           'rate': tax.rate,\n           'cost_center': tax.cost_center\n        }\n       doc.append('taxes', tax_dict)\n       \n   doc.calculate_taxes_and_totals()",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-09-18 10:29:04.009746",
  "module": "Custom App",
  "name": "Approved User Name",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Purchase Order",
  "script": "# def on_submit(doc, method):\n#     submitter = frappe.session.user  # Get the user who is submitting the document\n#     doc.db_set('custom_submitted_by', submitter)  # Save it in the custom field\n\n# def sav(doc, method):\nif doc.workflow_state == 'Approved' and not doc.custom_submitted_by:\n    doc.custom_submitted_by = frappe.session.user\n        # doc.db_set('custom_submitted_by', submitter)",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-09-18 10:28:56.345028",
  "module": "Custom App",
  "name": "Leave Application",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Leave Application",
  "script": "to_date = frappe.utils.getdate(doc.to_date)\nposting_date = frappe.utils.getdate(doc.posting_date)\n\n# Calculate the difference in days between the posting date and the leave date\ndays_difference = (posting_date - to_date).days\n\n# Check if the posting date is more than 4 days after the leave date\nif days_difference > 4:\n    frappe.throw(\"You cannot apply for leave. The deadline has expired.\")",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Validate",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-09-18 10:28:48.770028",
  "module": "Custom App",
  "name": "Address Autoname",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Address",
  "script": "if not doc.address_title:\r\n    if doc.links:\r\n        doc.address_title = doc.links[0].link_name\r\n\r\nif doc.address_title:\r\n    doc.name = frappe.utils.cstr(doc.address_title).strip()\r\n    \r\n    if frappe.db.exists(\"Address\", doc.name):\r\n        last_name = frappe.db.get_value(\"Address\", {\"name\": [\"like\", doc.name + \"-%\"]}, \"name\", order_by=\"creation desc\")\r\n        \r\n        if last_name:\r\n            last_number = int(last_name.split('-')[-1]) + 1\r\n            doc.name = f\"{doc.name}-{last_number}\"\r\n        else:\r\n            doc.name = f\"{doc.name}-1\"\r\nelse:\r\n    frappe.throw(_(\"Address Title is mandatory.\"))",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "testApi",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-09-18 10:28:30.786742",
  "module": "Custom App",
  "name": "API Test",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "def uncheck_the_credit_limit():\r\n    try:\r\n        frappe.log_error(title=\"Scheduler Triggered\", message=\"Script execution started.\")\r\n        query = \"\"\"SELECT name FROM `tabCustomer Credit Limit` WHERE parenttype = 'Customer' AND bypass_credit_limit_check = 1\"\"\"\r\n        results = frappe.db.sql(query, as_dict=True)\r\n        if not results:\r\n            frappe.log_error(title=\"Query Result\", message=\"No records found where credit limit bypass is enabled.\")\r\n            frappe.response['message'] = \"No records found\"\r\n            return\r\n        obj={\r\n                \"bypass_credit_limit_check\": 0,\r\n                \"modified\": frappe.utils.now(),\r\n                \"modified_by\": \"Administrator\"\r\n            }\r\n        updated_customer=[]\r\n        # Loop through each record\r\n        for row in results:\r\n             frappe.db.set_value(\"Customer Credit Limit\", row['name'], obj)\r\n             res_obj=row\r\n             updated_customer.append(res_obj)\r\n        frappe.db.commit()\r\n        frappe.log_error(title=\"Customer Credit Limit Update\", message=\"Credit limit bypass disabled for relevant customers.\")\r\n        frappe.response['content'] = updated_customer\r\n    except Exception as e:\r\n        # Log any error encountered during execution\r\n        frappe.log_error(title=\"General Error\", message=f\"Error during script execution: {str(e)}\")\r\n        frappe.response['Error'] = str(e)\r\n\r\n# Execute the function\r\nuncheck_the_credit_limit()\r\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": "10 23 * * *",
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "Cron",
  "modified": "2024-09-18 10:28:39.830605",
  "module": "Custom App",
  "name": "Scheduler Test",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "def uncheck_the_credit_limit():\r\n    try:\r\n        frappe.log_error(title=\"Scheduler Triggered\", message=\"Script execution started.\")\r\n        query = \"\"\"SELECT name FROM `tabCustomer Credit Limit` WHERE parenttype = 'Customer' AND bypass_credit_limit_check = 1\"\"\"\r\n        results = frappe.db.sql(query, as_dict=True)\r\n        if not results:\r\n            frappe.log_error(title=\"Query Result\", message=\"No records found where credit limit bypass is enabled.\")\r\n            return\r\n        # Loop through each record\r\n        for row in results:\r\n             frappe.db.set_value(\"Customer Credit Limit\", row['name'], {\r\n                \"bypass_credit_limit_check\": 0,\r\n                \"modified\": frappe.utils.now(),\r\n                \"modified_by\": \"Administrator\"\r\n            })\r\n        frappe.db.commit()\r\n        frappe.log_error(title=\"Customer Credit Limit Update\", message=\"Credit limit bypass disabled for relevant customers.\")\r\n    except Exception as e:\r\n        # Log any error encountered during execution\r\n        frappe.log_error(title=\"General Error\", message=f\"Error during script execution: {str(e)}\")\r\n\r\n# Execute the function\r\nuncheck_the_credit_limit()",
  "script_type": "Scheduler Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-06-23 15:18:40.473257",
  "module": "Custom App",
  "name": "Sales Person",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Sales Invoice",
  "script": "# Ensure sales_team exists and is a list\nif doc.get(\"sales_team\") and len(doc.sales_team) > 0:\n    sales_person = doc.sales_team[0].get(\"sales_person\")\n    frappe.errprint(\"Chcek Sales Person\"+sales_person)\n\n    if sales_person:\n        try:\n            # Try fetching the Sales Person Doc\n            sp_doc = frappe.get_doc(\"Sales Person\", sales_person)\n            # print(\"TEST\",sp_doc)\n            # Get the custom email or fallback\n            doc.custom_sales_person_email = sp_doc.get(\"custom_sales_person_email\") or \"sekar@protocollabels.com\"\n            frappe.errprint(\"Chcek Sales Person Email\"+doc.custom_sales_person_email)\n\n            # Optionally set a custom field if needed\n            doc.custom_direct_sales_person = sales_person\n\n        except Exception as e:\n            frappe.log_error(frappe.get_traceback(), \"Sales Person Email Fetch Failed\")\n    else:\n        doc.custom_sales_person_email = \"sekar@protocollabels.com\"\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-06-23 11:34:37.266481",
  "module": "Custom App",
  "name": "Set Service Person",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Sales Invoice",
  "script": "if doc.custom_service_request:\r\n    net_total = sum(item.qty * item.rate for item in doc.items)\r\n    sales_person_name = frappe.db.get_value(\"Sales Person\", {\"custom_sales_person_email\": doc.custom_sales_person_email}, \"name\")\r\n\r\n    if sales_person_name:\r\n        # Clear existing sales_team entries if needed\r\n        doc.custom_direct_sales_person=sales_person_name\r\n        doc.set(\"sales_team\", [])\r\n\r\n        doc.append(\"sales_team\", {\r\n            \"sales_person\": sales_person_name,\r\n            \"allocated_percentage\": 100,\r\n            \"allocated_amount\": net_total\r\n        })\r\n    else:\r\n        frappe.throw(f\"No Sales Person found for email {doc.custom_sales_person_email}\")",
  "script_type": "DocType Event"
 }
]